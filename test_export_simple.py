#!/usr/bin/env python3
"""
Simple test for Feature 7: Enterprise-Grade Export and Distribution.
Tests core export functionality without complex dependencies.
"""

import sys
import json
from pathlib import Path
from datetime import datetime, timezone
from decimal import Decimal

# Add the project root to Python path
sys.path.insert(0, str(Path(__file__).parent))

from crypto_portfolio_analyzer.visualization.export import (
    DataExporter, ExportConfig, ExportFormat, CSVExporter, JSONExporter
)


def create_sample_data():
    """Create sample data for testing."""
    return [
        {
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'symbol': 'BTC',
            'price': 52000.00,
            'quantity': 1.5,
            'value': 78000.00
        },
        {
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'symbol': 'ETH',
            'price': 3800.00,
            'quantity': 10.0,
            'value': 38000.00
        },
        {
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'symbol': 'SOL',
            'price': 110.00,
            'quantity': 50.0,
            'value': 5500.00
        }
    ]


def test_csv_export():
    """Test CSV export functionality."""
    print("\nüìä Testing CSV Export...")
    
    try:
        # Create CSV exporter
        config = ExportConfig(
            format=ExportFormat.CSV,
            include_headers=True,
            decimal_places=2
        )
        
        exporter = CSVExporter(config)
        data = create_sample_data()
        
        # Export to CSV
        output_file = exporter.export(data, "test_export.csv")
        print(f"‚úÖ CSV export successful: {output_file}")
        
        # Verify file exists and has content
        if Path(output_file).exists():
            with open(output_file, 'r') as f:
                content = f.read()
                lines = content.strip().split('\n')
                print(f"üìÑ CSV file has {len(lines)} lines")
                print(f"üìã Header: {lines[0] if lines else 'No content'}")
                if len(lines) > 1:
                    print(f"üìã Sample data: {lines[1]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå CSV export failed: {e}")
        return False


def test_json_export():
    """Test JSON export functionality."""
    print("\nüìÑ Testing JSON Export...")
    
    try:
        # Create JSON exporter
        config = ExportConfig(
            format=ExportFormat.JSON,
            include_metadata=True,
            decimal_places=6
        )
        
        exporter = JSONExporter(config)
        data = create_sample_data()
        
        # Export to JSON
        output_file = exporter.export(data, "test_export.json")
        print(f"‚úÖ JSON export successful: {output_file}")
        
        # Verify JSON structure
        if Path(output_file).exists():
            with open(output_file, 'r') as f:
                json_data = json.load(f)
                print(f"üìä JSON structure:")
                print(f"  ‚Ä¢ Format version: {json_data.get('format_version')}")
                print(f"  ‚Ä¢ Data type: {json_data.get('data_type')}")
                print(f"  ‚Ä¢ Records: {len(json_data.get('data', []))}")
                print(f"  ‚Ä¢ Has metadata: {'metadata' in json_data}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå JSON export failed: {e}")
        return False


def test_data_exporter():
    """Test the main DataExporter class."""
    print("\nüîß Testing DataExporter...")
    
    try:
        exporter = DataExporter()
        data = create_sample_data()
        
        # Test CSV export
        csv_config = ExportConfig(format=ExportFormat.CSV)
        csv_file = exporter.export_data(data, csv_config, "main_export.csv")
        print(f"‚úÖ DataExporter CSV: {csv_file}")
        
        # Test JSON export
        json_config = ExportConfig(format=ExportFormat.JSON, include_metadata=True)
        json_file = exporter.export_data(data, json_config, "main_export.json")
        print(f"‚úÖ DataExporter JSON: {json_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå DataExporter test failed: {e}")
        return False


def test_export_formats():
    """Test different export format configurations."""
    print("\n‚öôÔ∏è Testing Export Format Configurations...")
    
    try:
        data = create_sample_data()
        
        # Test different configurations
        configs = [
            ("Basic CSV", ExportConfig(format=ExportFormat.CSV, include_headers=True)),
            ("Detailed JSON", ExportConfig(format=ExportFormat.JSON, include_metadata=True, decimal_places=8)),
            ("Compact CSV", ExportConfig(format=ExportFormat.CSV, include_headers=False, decimal_places=2))
        ]
        
        for name, config in configs:
            try:
                if config.format == ExportFormat.CSV:
                    exporter = CSVExporter(config)
                else:
                    exporter = JSONExporter(config)
                
                filename = f"config_test_{name.lower().replace(' ', '_')}.{config.format.value}"
                output_file = exporter.export(data, filename)
                print(f"‚úÖ {name}: {output_file}")
                
            except Exception as e:
                print(f"‚ùå {name} failed: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Export format test failed: {e}")
        return False


def test_file_operations():
    """Test file operations and path handling."""
    print("\nüìÅ Testing File Operations...")
    
    try:
        # Test output directory creation
        config = ExportConfig(
            format=ExportFormat.CSV,
            output_path="test_exports/subdirectory"
        )
        
        exporter = CSVExporter(config)
        data = create_sample_data()
        
        output_file = exporter.export(data, "directory_test.csv")
        print(f"‚úÖ Directory creation test: {output_file}")
        
        # Verify directory was created
        output_path = Path(output_file)
        if output_path.exists():
            print(f"üìÅ File created in: {output_path.parent}")
            print(f"üìÑ File size: {output_path.stat().st_size} bytes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå File operations test failed: {e}")
        return False


def test_data_validation():
    """Test data validation and error handling."""
    print("\nüîç Testing Data Validation...")
    
    try:
        exporter = DataExporter()
        
        # Test empty data
        try:
            empty_config = ExportConfig(format=ExportFormat.CSV)
            exporter.export_data([], empty_config, "empty_test.csv")
            print("‚úÖ Empty data handling: Passed")
        except Exception as e:
            print(f"‚ö†Ô∏è Empty data handling: {e}")
        
        # Test invalid format
        try:
            invalid_config = ExportConfig(format="invalid_format")
            print("‚ùå Invalid format should have failed")
        except Exception:
            print("‚úÖ Invalid format validation: Passed")
        
        # Test large dataset simulation
        large_data = [create_sample_data()[0] for _ in range(1000)]
        large_config = ExportConfig(format=ExportFormat.JSON)
        large_file = exporter.export_data(large_data, large_config, "large_test.json")
        print(f"‚úÖ Large dataset test: {large_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Data validation test failed: {e}")
        return False


def main():
    """Main test function."""
    print("üöÄ Testing Feature 7: Enterprise-Grade Export and Distribution (Simple)")
    print("=" * 75)
    
    # Run core tests
    test_functions = [
        ("CSV Export", test_csv_export),
        ("JSON Export", test_json_export),
        ("DataExporter", test_data_exporter),
        ("Export Formats", test_export_formats),
        ("File Operations", test_file_operations),
        ("Data Validation", test_data_validation)
    ]
    
    results = []
    
    for test_name, test_func in test_functions:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {e}")
            results.append((test_name, False))
    
    # Summary
    print("\n" + "=" * 75)
    print("üìä TEST SUMMARY")
    print("=" * 75)
    
    passed = 0
    for i, (test_name, result) in enumerate(results):
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{i+1}. {test_name}: {status}")
        if result:
            passed += 1
    
    total = len(results)
    print(f"\nOverall: {passed}/{total} tests passed")
    
    if passed == total:
        print("\nüéâ Core enterprise export features are working!")
        print("\nüîß Tested Components:")
        print("  ‚úÖ CSV Data Export")
        print("  ‚úÖ JSON Data Export")
        print("  ‚úÖ DataExporter Main Class")
        print("  ‚úÖ Export Format Configurations")
        print("  ‚úÖ File Operations and Path Handling")
        print("  ‚úÖ Data Validation and Error Handling")
        
        print("\nüìÅ Generated Test Files:")
        print("  ‚Ä¢ test_export.csv")
        print("  ‚Ä¢ test_export.json")
        print("  ‚Ä¢ main_export.csv/json")
        print("  ‚Ä¢ config_test_*.csv/json")
        print("  ‚Ä¢ test_exports/ directory")
        
        print("\nüí° Next Steps:")
        print("  ‚Ä¢ Test Excel export (requires openpyxl)")
        print("  ‚Ä¢ Test chart export (requires plotly + kaleido)")
        print("  ‚Ä¢ Configure enterprise distribution")
        print("  ‚Ä¢ Set up automated reporting")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} tests failed. Check the error messages above.")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
